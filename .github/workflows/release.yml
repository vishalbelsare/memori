name: Release & Publish

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      test_pypi:
        description: 'Upload to Test PyPI only'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  CACHE_VERSION: v1

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.validation.outputs.should_publish }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=v${VERSION}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
            echo "version=v${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha"
            exit 1
          fi
          echo "Version format valid: $VERSION"

      - name: Check if version exists
        id: validation
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^${VERSION}$" && [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Version $VERSION already exists"
            echo "should_publish=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Version $VERSION is new"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: Build & Test Release
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-release-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine pytest pytest-cov
          pip install -e ".[dev]"

      - name: Run quality checks
        run: |
          echo "Running final quality checks..."
          python -m black --check memori/ tests/
          python -m ruff check memori/ tests/
          python -m mypy memori/ --ignore-missing-imports --show-error-codes

      - name: Run tests
        run: |
          echo "Test suite temporarily disabled - no tests available yet..."
          echo "Skipping tests for release - will be added in future versions..."

      - name: Build package
        run: |
          echo "Building distribution packages..."
          python -m build

      - name: Verify package
        run: |
          echo "Verifying package integrity..."
          python -m twine check dist/*
          
          # Test installation
          echo "Testing package installation..."
          pip install dist/*.whl
          python -c "import memori; print(f'Package import successful: {memori.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist-${{ needs.validate-release.outputs.version }}
          path: dist/
          retention-days: 30

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    if: |
      needs.validate-release.outputs.should_publish == 'true' && 
      github.event.inputs.test_pypi == 'true'
    
    environment:
      name: testpypi
      url: https://test.pypi.org/project/memorisdk/
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Test TestPyPI installation
        run: |
          echo "Testing installation from TestPyPI..."
          sleep 60  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ memorisdk
          python -c "import memori; print(f'TestPyPI installation successful: {memori.__version__}')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    if: |
      needs.validate-release.outputs.should_publish == 'true' && 
      github.event.inputs.test_pypi != 'true' &&
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') ||
       github.event_name == 'release' ||
       github.event_name == 'workflow_dispatch')
    
    environment:
      name: pypi
      url: https://pypi.org/project/memorisdk/
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Test PyPI installation
        run: |
          echo "Testing installation from PyPI..."
          sleep 60  # Wait for package to be available
          pip install memorisdk
          python -c "import memori; print(f'PyPI installation successful: {memori.__version__}')"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    if: |
      needs.validate-release.outputs.should_publish == 'true' && 
      github.event_name == 'push' && 
      startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract changelog section for this version
          if [[ -f CHANGELOG.md ]]; then
            echo "Extracting changelog for $VERSION..."
            # This is a simple extraction - you might want to make it more robust
            RELEASE_NOTES=$(sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1)
            if [[ -z "$RELEASE_NOTES" ]]; then
              RELEASE_NOTES="Release $VERSION

              See [CHANGELOG.md](https://github.com/GibsonAI/memori/blob/main/CHANGELOG.md) for details."
            fi
          else
            RELEASE_NOTES="Release $VERSION

            Professional-grade memory layer for AI agents and multi-agent systems."
          fi
          
          # Save to file for GitHub CLI
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          gh release create "$VERSION" \
            --title "Memori AI $VERSION" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            dist/*

  update-docker:
    name: Update Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: |
      needs.validate-release.outputs.should_publish == 'true' && 
      github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/gibsonai/memori:latest
            ghcr.io/gibsonai/memori:${{ needs.validate-release.outputs.version }}
          platforms: linux/amd64,linux/arm64

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi, create-github-release]
    if: always() && needs.validate-release.outputs.should_publish == 'true'
    
    steps:
      - name: Notify success
        if: needs.publish-pypi.result == 'success' && needs.create-github-release.result == 'success'
        run: |
          echo "Release ${{ needs.validate-release.outputs.version }} published successfully!"
          echo "PyPI: https://pypi.org/project/memorisdk/"
          echo "GitHub: https://github.com/GibsonAI/memori/releases/tag/${{ needs.validate-release.outputs.version }}"

      - name: Notify failure
        if: needs.publish-pypi.result == 'failure' || needs.create-github-release.result == 'failure'
        run: |
          echo "Release ${{ needs.validate-release.outputs.version }} failed!"
          echo "Check the workflow logs for details."
          exit 1